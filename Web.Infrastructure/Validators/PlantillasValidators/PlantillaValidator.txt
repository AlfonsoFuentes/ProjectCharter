//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Application.DTOs.<EntityName>;
using Domain.Common.Validators;
using FluentValidation;
using System.Threading.Tasks;
using System;

namespace Application.Validators.<EntityName>
{
    public class <EntityName>Validator : AbstractValidator<<EntityName>Response>, IValidatorBase
    {
        private readonly IGenericService Service;

        public <EntityName>Validator(IGenericService service)
        {
            Service = service;

            RuleFor(x => x.Name).NotEmpty().WithMessage("Name must be defined!");

            RuleFor(x => x.Name).MustAsync(ReviewIfNameExist)
                .When(x => !string.IsNullOrEmpty(x.Name))
                .WithMessage(x => $"{x.Name} already exist");
        }

        async Task<bool> ReviewIfNameExist(<EntityName>Response request, string name, System.Threading.CancellationToken cancellationToken)
        {
            Validate<EntityName>NameRequest validate = new()
            {
                Name = name,
                Id = request.Id
            };

            var result = await Service.Validate(validate);
            return !result;
        }
    }
}