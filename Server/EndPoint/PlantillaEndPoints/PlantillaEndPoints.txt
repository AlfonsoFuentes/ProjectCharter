//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Builder;
using Domain.Entities;
using Application.DTOs.<EntityName>;
using Application.Common.Interfaces.Repositories;
using Application.Common.Interfaces.QueryRepositories;
using System.Linq.Expressions;

namespace WebApi.Endpoints.<EntityName>
{
    public static class CreateUpdate<EntityName>EndPoint
    {
        public class EndPoint : IEndPoint
        {
            public void MapEndPoint(IEndpointRouteBuilder app)
            {
                app.MapPost(StaticClass.<EntityName>.EndPoint.CreateUpdate, async (<EntityName>Response Data, IRepository Repository) =>
                {
                    <EntityName>? row = null;
                    if (Data.Id == Guid.Empty)
                    {
                        row = <EntityName>.Create();

                        await Repository.AddAsync(row);
                    }
                    else
                    {
                        row = await Repository.GetByIdAsync<<EntityName>>(Data.Id);
                        if (row == null) { return Result.Fail(Data.NotFound); }
                        await Repository.UpdateAsync(row);
                    }

                    Data.Map(row);
                    List<string> cache = [.. StaticClass.<EntityName>.Cache.Key(row.Id)];

                    var result = await Repository.Context.SaveChangesAndRemoveCacheAsync(cache.ToArray());

                    return Result.EndPointResult(result,
                        Data.Succesfully,
                        Data.Fail);

                });
            }
        }

        public static <EntityName> Map(this <EntityName>Response request, <EntityName> row)
        {
            row.Name = request.Name;
            return row;
        }
    }

    public static class Delete<EntityName>EndPoint
    {
        public class EndPoint : IEndPoint
        {
            public void MapEndPoint(IEndpointRouteBuilder app)
            {
                app.MapPost(StaticClass.<EntityName>.EndPoint.Delete, async (Delete<EntityName>Request Data, IRepository Repository) =>
                {
                    var row = await Repository.GetByIdAsync<<EntityName>>(Data.Id);
                    if (row == null) { return Result.Fail(Data.NotFound); }
                    await Repository.RemoveAsync(row);

                    List<string> cache = [.. StaticClass.<EntityName>.Cache.Key(row.Id)];

                    var result = await Repository.Context.SaveChangesAndRemoveCacheAsync(cache.ToArray());
                    return Result.EndPointResult(result,
                        Data.Succesfully,
                        Data.Fail);

                });
            }
        }
    }

    public static class GetAll<EntityName>EndPoint
    {
        public class EndPoint : IEndPoint
        {
            public void MapEndPoint(IEndpointRouteBuilder app)
            {
                app.MapPost(StaticClass.<EntityName>.EndPoint.GetAll, async (<EntityName>GetAll request, IQueryRepository Repository) =>
                {
                    string CacheKey = StaticClass.<EntityName>.Cache.GetAll;
                    var rows = await Repository.GetAllAsync<<EntityName>>(CacheKey);

                    if (rows == null)
                    {
                        return Result<<EntityName>ResponseList>.Fail(
                        StaticClass.ResponseMessages.ReponseNotFound(StaticClass.<EntityName>.ClassLegend));
                    }

                    var maps = rows.Select(x => x.Map()).ToList();

                    <EntityName>ResponseList response = new <EntityName>ResponseList()
                    {
                        Items = maps
                    };
                    return Result<<EntityName>ResponseList>.Success(response);

                });
            }
        }
    }

    public static class Get<EntityName>ByIdEndPoint
    {
        public class EndPoint : IEndPoint
        {
            public void MapEndPoint(IEndpointRouteBuilder app)
            {
                app.MapPost(StaticClass.<EntityName>.EndPoint.GetById, async (Get<EntityName>ByIdRequest request, IQueryRepository Repository) =>
                {
                    Expression<Func<<EntityName>, bool>> Criteria = x => x.Id == request.Id;

                    string CacheKey = StaticClass.<EntityName>.Cache.GetById(request.Id);
                    var row = await Repository.GetAsync(Cache: CacheKey, Criteria: Criteria);

                    if (row == null)
                    {
                        return Result.Fail(request.NotFound);
                    }

                    var response = row.Map();
                    return Result.Success(response);

                });
            }
        }

        public static <EntityName>Response Map(this <EntityName> row)
        {
            return new()
            {
                Id = row.Id,
                Name = row.Name,
            };
        }
    }

    public static class Validate<EntityName>NameEndPoint
    {
        public class EndPoint : IEndPoint
        {
            public void MapEndPoint(IEndpointRouteBuilder app)
            {
                app.MapPost(StaticClass.<EntityName>.EndPoint.Validate, async (Validate<EntityName>NameRequest Data, IQueryRepository Repository) =>
                {
                    Expression<Func<<EntityName>, bool>> CriteriaId = null!;
                    Func<<EntityName>, bool> CriteriaExist = x => Data.Id == null ?
                    x.Name.Equals(Data.Name) : x.Id != Data.Id.Value && x.Name.Equals(Data.Name);
                    string CacheKey = StaticClass.<EntityName>.Cache.GetAll;

                    return await Repository.AnyAsync(Cache: CacheKey, CriteriaExist: CriteriaExist, CriteriaId: CriteriaId);
                });
            }
        }
    }
}