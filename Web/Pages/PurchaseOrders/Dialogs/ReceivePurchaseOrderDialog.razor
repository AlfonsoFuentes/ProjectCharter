<EditForm Model="@Model" OnValidSubmit="Submit">
    <MudCard>
        <MudCardContent>

            <FluentValidationValidator @ref="_fluentValidationValidator" />
  
            <PurchaseOrderDialog Model="@Model"
                                 ValidateAsync="ValidateAsync"
                                 Suppliers="@Suppliers" AddSupplier=AddSupplier
                                 
                                 ShowReceive=true>
                <ChildContent>
                    <MudGrid>
                        <MudItem sm="2" xs="12">
                            <TextField Label="PO Number"
                                       @bind-Value=@Model.PONumber
                                       Placeholder="Define PO Number"
                                       For="() => Model.PONumber"
                                       ValidateAsync="ValidateAsync"></TextField>

                        </MudItem>
                        <MudItem sm="2" xs="12">
                            <DatePicker Label="Expect date"
                                        @bind-Value=@Model.ExpectedDate
                                        ValidateAsync="ValidateAsync"
                                        For="() => Model.ExpectedDate"></DatePicker>
                        </MudItem>
                        <MudItem sm="8" xs="12">
                            <MudGrid>
                                <MudItem sm="3" xs="12">
                                    <DatePicker Label="Receive Date"
                                                @bind-Value=@Model.ReceivingDate
                                                ValidateAsync="ValidateAsync"
                                                For="() => Model.ReceivingDate"
                                                Change="@(()=>ChangedReceiveDate(Model.ReceivingDate))"></DatePicker>
                                </MudItem>
                                <MudItem sm="3" xs="12">
                                    <Field Label="Receiving, USD">
                                        @Model.TotalReceivingValueUSD.ToCurrencyCulture()
                                    </Field>
                                    <ValidationMessage For="() => Model.IsAnyPendingToReceiveLessThanZero" style="color:red; font-size:x-small;" />
                                </MudItem>
                                <MudItem sm="3" xs="12">
                                    <MudToggleGroup T="string" Value="_value" ValueChanged="ToReceiveValueChanged" Size=Size.Small Color="Color.Surface"
                                                    SelectionMode="SelectionMode.SingleSelection">
                                        <MudToggleItem Value="@("Manual")" />
                                        <MudToggleItem Value="@("Complete")" />
                                        <MudToggleItem Value="@("Percentage")" />
                                    </MudToggleGroup>
                                </MudItem>
                                <MudItem sm="3" xs="12">
                                    @if (_value.Equals("Percentage"))
                                    {
                                        <DoubleNumericField Label="%Percentage" Value="PercentageReceiving" ValueChanged="PercentageChanged">

                                        </DoubleNumericField>

                                    }

                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </ChildContent>


            </PurchaseOrderDialog>





        </MudCardContent>
        <MudCardActions>

            <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="Cancel" Color="Color.Transparent" Variant="Variant.Outlined"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Save" Disabled=!Validated ButtonType="ButtonType.Submit" Variant="Variant.Outlined"></MudIconButton>

        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private string _value = "To define";

}
