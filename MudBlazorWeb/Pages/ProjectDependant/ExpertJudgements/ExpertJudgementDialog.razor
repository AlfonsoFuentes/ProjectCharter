<EditForm Model="@Model" OnValidSubmit="Submit">
    <MudCard>
        <MudCardContent>

            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <TextField @bind-Value="@Model.Name"
                       Lines=3
                       ValidateAsync="ValidateAsync"
                       Label="Name"
                       For="@(() => Model.Name)">
            </TextField>
            <MudStack Row=true AlignItems="AlignItems.Stretch" Justify="Justify.FlexEnd">

                <SelectIconButton @bind-Value="@Model.Expert"
                                  TValue="StakeHolderResponse"
                                  Icon="@Icons.Material.Filled.Add" 
                                  ToolTip="Add StakeHolder" 
                                  ButtonClick="AddSatkeHolder"
                                  Label="Expert"
                                  For="@(() => Model.Expert)"
                                  Property="@(p=>p.Name)"
                                  Items=StakeHolderResponseList.Items
                                  Clearable="true">

                </SelectIconButton>


            </MudStack>

        </MudCardContent>
        <MudCardActions>

            <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="Cancel" Color="Color.Transparent" Variant="Variant.Outlined"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Save" Disabled=!Validated ButtonType="ButtonType.Submit" Variant="Variant.Outlined"></MudIconButton>

        </MudCardActions>
    </MudCard>
</EditForm>
@code {
    async Task NameChanged(string name)
    {
        Model.Name = name;
        await ValidateAsync();
    }
    async Task ExpertChanged(StakeHolderResponse expert)
    {
        Model.Expert = expert;
        await ValidateAsync();

    }
}
